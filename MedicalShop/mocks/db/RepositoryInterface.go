// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	sql "database/sql"

	model "github.com/aayush1512jais/go_prog/MedicalShop/model"
	mock "github.com/stretchr/testify/mock"
)

// RepositoryInterface is an autogenerated mock type for the RepositoryInterface type
type RepositoryInterface struct {
	mock.Mock
}

// AddMedicine provides a mock function with given fields: medicine
func (_m *RepositoryInterface) AddMedicine(medicine model.Medicine) error {
	ret := _m.Called(medicine)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.Medicine) error); ok {
		r0 = rf(medicine)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteMedicine provides a mock function with given fields: id
func (_m *RepositoryInterface) DeleteMedicine(id int) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllMedicine provides a mock function with given fields:
func (_m *RepositoryInterface) GetAllMedicine() (*sql.Rows, error) {
	ret := _m.Called()

	var r0 *sql.Rows
	if rf, ok := ret.Get(0).(func() *sql.Rows); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.Rows)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMedicine provides a mock function with given fields: id
func (_m *RepositoryInterface) GetMedicine(id int) (model.Medicine, error) {
	ret := _m.Called(id)

	var r0 model.Medicine
	if rf, ok := ret.Get(0).(func(int) model.Medicine); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(model.Medicine)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateMedicine provides a mock function with given fields: newMedicine
func (_m *RepositoryInterface) UpdateMedicine(newMedicine model.Medicine) error {
	ret := _m.Called(newMedicine)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.Medicine) error); ok {
		r0 = rf(newMedicine)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
