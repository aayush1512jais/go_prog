// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	model "github.com/aayush1512jais/go_prog/MedicalShop/model"
	mock "github.com/stretchr/testify/mock"
)

// MedicineService is an autogenerated mock type for the MedicineService type
type MedicineService struct {
	mock.Mock
}

// Add provides a mock function with given fields: medicine
func (_m *MedicineService) Add(medicine model.Medicine) error {
	ret := _m.Called(medicine)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.Medicine) error); ok {
		r0 = rf(medicine)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: id
func (_m *MedicineService) Delete(id int) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: id
func (_m *MedicineService) Get(id int) (model.Medicine, error) {
	ret := _m.Called(id)

	var r0 model.Medicine
	if rf, ok := ret.Get(0).(func(int) model.Medicine); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(model.Medicine)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields:
func (_m *MedicineService) GetAll() ([]model.Medicine, error) {
	ret := _m.Called()

	var r0 []model.Medicine
	if rf, ok := ret.Get(0).(func() []model.Medicine); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Medicine)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: medicine
func (_m *MedicineService) Update(medicine model.Medicine) error {
	ret := _m.Called(medicine)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.Medicine) error); ok {
		r0 = rf(medicine)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
